名称：计时器模块
文件：timer


相对上一个版本：
无


当前版本：

【V1.0.1】

--定时触发

--计时器启动与停止

--触发次数计数，获取，设置

--计时器触发时间设置

====================
--初始计时器

initTimer()

初始化计时器系统

====================
--添加计时器

addTimer(string,number)

在任意时刻，添加一个计时器，并设置触发时间

====================
--开始计时器

staTimer(string)

在任意时刻，开始一个计时器

====================
--重启计时器

resTimer(string)

在任意时刻，重启一个计时器

====================
--运行计时器

runTimer()

放置在update回调中，用于接受时间参数并检查计时器系统的线程错误

====================
--触发检查器

timer(string)

计时器触发检查点，查看指定计时器是否触发，返回true，false和nil，触发时返回true

====================
--结束计时器

endTimer(string)

停止一个计时器的运行，可以使用staTimer()函数再次启动

====================
--破坏计时器

desTimer(string)

将一个计时器的引用从系统中释放，交给GC处理

====================
--重置计时器运行计数

resRunCount(string)

重置一个计时器的运行计数

====================
--设置计时器运行计数

setRunCount(string,number)

设置一个计时器的运行计数

====================
--获得计时器运行计数

getRunCount(string)

获得一个计时器的运行计数，返回number（整数）
[注释：计时器每触发一次将增加一次运行计数]

====================
--设置计时器触发时间

setTickTime(string)

设置一个计时器触发的时间

====================
--获得计时器触发时间

getTickTime(string)

获得一个计时器触发的时间，返回number

====================
--检查计时器是否存在（测试）

isHaveTimer(string)

检查一个计时器是否存在，返回number和nil，存在时返回number


额外注释：
====================
--错误检查

如果使用的计时器不存在，将返回试图调用的计时器名称并提示不存在，且中断运行